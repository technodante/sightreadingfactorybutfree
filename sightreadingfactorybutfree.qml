import QtQuick 2.2
import QtQuick.Controls 1.1
import QtQuick.Controls.Styles 1.3
import QtQuick.Layouts 1.1
import QtQuick.Window 2.2
import QtQuick.Dialogs 1.1
import Qt.labs.settings 1.0

import MuseScore 3.0

MuseScore {
		menuPath: "Plugins.SightReadingFactoryButFree"
    description: "Tired of paying Sight Reading Factory subscription fees? Download this plugin for Musescore 3.0.5 and above and start generating sight-reading music for free!"
    version: "1.0.0"
  	pluginType: "dialog"
    requiresScore: false

    property int margin: 10

    width:  360
    height: 450
  		
    onRun: {
        if((mscoreMajorVersion == 3) && (mscoreMinorVersion == 0) && (mscoreUpdateVersion < 5)) {
              console.log(qsTr("Unsupported MuseScore version.\nSight Reading Factory, but Free needs v3.0.5 or above.\n"));
              Qt.quit();
        }
  	}
  
  	Settings {
      id: settings
      category: "Plugin-SightReadingFactoryButFree"
    }
  
  	function createScore()
  	{
		console.log("Creating Score");
      	
      	if(getRandomInt(0, 1000) == 999) {
            console.log("Rick Rolling");
            var score = newScore("Never Gonna Give You Up.mscz", "violin", 4);
            score.addText("title", "Never Gonna Give You Up");
            score.addText("composer", "Rick Astley");

            var cursor = score.newCursor();

            cursor.track = 0;
            cursor.rewind(0);

            cursor.setDuration(3, 8);
            cursor.addNote(60);
            cursor.addNote(62);
            cursor.setDuration(1, 4);
            cursor.addNote(55);
            cursor.setDuration(3, 8);
            cursor.addNote(62);
            cursor.addNote(64);
            cursor.setDuration(1, 16);
            cursor.addNote(67);
            cursor.addNote(65);
            cursor.addNote(64);
            cursor.addNote(60);
            cursor.setDuration(3,8);
            cursor.addNote(60);
            cursor.addNote(62);
            cursor.setDuration(5,4);
            cursor.addNote(55);
            Qt.quit();
            return;
        }
      
      
        var measures = numMeasures.text;
        console.log(measures);
        var characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-';
        var name = '';
        for(var i=0; i<8; i++) {
        	name += characters.charAt(Math.floor(Math.random()*characters.length));
        }
        console.log(name);
      	console.log(instrumentBox.currentText.toLowerCase());
        var score = newScore(name + '.mscz', ""+instrumentBox.currentText.toLowerCase(), measures);
				
      	var dif = difSlider.value;
      	console.log(dif);
      	
        var timeText = timeSig.currentText;
        console.log(timeText);
        var denominator = 1;
        switch(timeText) {
            case "4/4": var numerator = 4; var denominator = 4; break;
            case "3/4": var numerator = 3; var denominator = 4; break;
            case "2/4": var numerator = 2; var denominator = 4; break;
            case "2/2": var numerator = 2; var denominator = 2; break;
            case "6/8": var numerator = 6; var denominator = 8; break;
        }//crashes with anything that isn't 4/4

        var keyText = keyBox.currentText;
        console.log(keyText);
        switch(keyText) {
            case "C": var key = 0; break;
            case "C♯": var key = 1; break;
            case "D": var key = 2; break;
            case "E♭": var key = 3; break;
            case "E": var key = 4; break;
            case "F": var key = 5; break;
            case "F♯": var key = 6; break;
            case "G": var key = 7; break;
            case "G♯": var key = 8; break;
            case "A": var key = 9; break;
            case "B♭": var key = 10; break;
            case "B": var key = 11; break;
        }
        console.log(key);

        score.addText("title", name);
        score.addText("subtitle", "Generated by Sight Reading Factory, but Free");
        score.addText("composer", "Sight Reading Factory, but Free");

        var cursor = score.newCursor();
        cursor.track = 0;

        cursor.rewind(0);
        var ts = newElement(Element.TIMESIG);
        ts.timesig = fraction(numerator, denominator);
        cursor.add(ts);
      	
      	cursor.rewind(0);
      	var tempoElement = newElement(Element.TEMPO_TEXT);
      	cursor.add(tempoElement);
      	tempoElement.tempo = tempoBox.text / 64;
      	tempoElement.visible = true;
        tempoElement.followText = true;
      
      	var tempoText = newElement(Element.SYSTEM_TEXT);
      	cursor.add(tempoText);
      	tempoText.text = " = " + tempoBox.text;
      	tempoText.visible = true;

        // var ks = newElement(Element.KEYSIG);
        // ks.keysig = key;
      	// ks.visible = true;
      	// ks.followText = true;
        // cursor.add(ks);

        cursor.rewind(0);
      	addNotes(cursor, key, measures, numerator, denominator, dif, ""+instrumentBox.currentText.toLowerCase());
  	}
  
  	function addNotes(cursor, key, measures, numerator, denominator, dif, instrument)
  	{
        var rythms = [
            [1],
            [2],
            [4],
            [8],
            [4, 4, 4, 4],
            [2, 4, 4],
            [4, 8, 8, 4, 4],
            [4, 4, 4],
            [4, 2, 4],          
            [4, 8, 8, 8, 8, 8, 8],
            [4, 4, 4, 8, 8],
            [4, 8, 8, 8, 8],
            [4, 2],
            [4, 8, 8, 4, 4],
            [16],
            [4, 8, 16, 16],
            [8, 16, 16],
            [16, 16, 16, 16],
            [2, 16, 16, 16, 8, 16],
            [16, 8, 16, 8, 8, 4, 4],
            [16, 16, 16, 16, 8, 8, 8, 8, 4, 4, 2],
            [16, 16, 16, 16, 8, 8, 8, 8],
            [32, 32, 16, 8],
            [4, 4, 4, 8, 8]
        ];
      	var nm3 = 55 + key;
      	var nm2 = 57 + key;
      	var nm1 = 59 + key;
        var n1 = 60 + key;
        var n2 = 62 + key;
        var n3 = 64 + key;
        var n4 = 65 + key;
        var n5 = 67 + key;
        var n6 = 69 + key;
        var n7 = 71 + key;
        var n8 = 72 + key;
      	var n9 = 74 + key;
      	var n10 = 76 + key;
      	var n11 = 77 + key;
      	var n12 = 79 + key;
  	    var notes = [n1, -1, -1, -1, nm3, nm2, nm1, nm1, n1, n1, n2, n3, n3, n5, n5, n4, n4, n2, n6, n7, n8, n8, n9, n10, n11, n12]; // -1 == rest; more occurrances of note = higher probability
				
      	for(var i=0; i<notes.length; i++) {
            notes[i] = ((instrument == "flute" && key < 6 || notes[i] < 60) && notes[i] != -1) ? notes[i] + 12 : notes[i];
            notes[i] = (instrument == "trumpet" && key > 4 && notes[i] >= 63) ? notes[i] - 12 : notes[i];
            notes[i] = ((instrument == "oboe" && notes[i] <= 57) && notes[i] != -1) ? notes[i] + 12 : notes[i];
        }
      	console.log(notes);
      
      	var totalCounts = measures * (numerator / denominator);
      	var newRythms = [];
      	
      	while(countSum(newRythms) < totalCounts) {
            var randomRythm = rythms[getRandomInt(0, Math.min(rythms.length - 12 + (dif * 2), rythms.length))];
            if(countSum(newRythms) + countSum(randomRythm) > totalCounts) {
              continue;
            }
            // randomRythm.forEach(element => newRythm.push(element));
          	for(var i=0; i<randomRythm.length; i++) {
              	newRythms.push(randomRythm[i]);
            }
        }
      	
      	var lastNote = notes[0];
      	
      	for(var i=0; i<newRythms.length; i++)	{
            cursor.setDuration(1, newRythms[i]);
            var randomNote = notes[getRandomInt(0, Math.max(rythms.length - 12 + (dif * 2), rythms.length))];
          	while((Math.abs(randomNote - lastNote) > 9 + dif || randomNote == lastNote) && randomNote != -1) {
              	randomNote = notes[getRandomInt(0, Math.max(rythms.length - 12 + (dif * 2), rythms.length))];
            }
            if(randomNote == -1) {
              	cursor.addRest();
            }
            else {
                cursor.addNote(randomNote);
                lastNote = randomNote;
            }
        }
    }
  
  	function getRandomInt(lower, upper) //lower inclusive, upper exclusive
    {
  		return Math.floor(Math.random() * (upper - lower) + lower);
	}
  
  	function countSum(arr) {
      	var sum = 0;
      	// arr.forEach(element => sum += (1 / element));
      	for(var i=0; i<arr.length; i++) {
        		sum += (1 / arr[i]);
      	}
      	return sum;
    }
  
    Rectangle {
        color: "lightgrey"
        anchors.fill: parent
        GridLayout {
            columns: 2
            anchors.fill: parent
            anchors.margins: 10
          	Label {
                  text: "Key (Concert):"
            }
            ComboBox {
                id: keyBox
                model: ListModel {
                    id: keyList
                    ListElement { text: "C" }
                    ListElement { text: "C♯" }
                    ListElement { text: "D" }
                    ListElement { text: "E♭" }
                    ListElement { text: "E" }
                    ListElement { text: "F" }
                    ListElement { text: "F♯" }
                    ListElement { text: "G"  }
                    ListElement { text: "G♯" }
                    ListElement { text: "A" }
                    ListElement { text: "B♭" }
                    ListElement { text: "B" }
                 }
                    currentIndex: 0
                    style: ComboBoxStyle {
                    font.family: 'MScore Text'
                    font.pointSize: 14
                }
            }
          
          	Label {
                  text: "Time Signature:"
            }
            ComboBox {
                id: timeSig
                model: ListModel {
                    id: timeSigList
                    ListElement { text: "4/4"  }
                    //ListElement { text: "3/4" }
                    //ListElement { text: "2/4" }
                    //ListElement { text: "2/2" }
                    //ListElement { text: "6/8" }
                 }
                    currentIndex: 0
                    style: ComboBoxStyle {
                    font.family: 'MScore Text'
                    font.pointSize: 14
                }
            }
          
          	Label {
              	text: "Tempo:"
            }
          	TextField{
              	id: tempoBox
                text: '120'
              	validator: DoubleValidator { bottom: 1; top: 255; decimals: 0; notation: DoubleValidator.StandardNotation; }
              	implicitHeight: 20
            }
          	
          	Label {
            	text: "Difficulty:"
          	}
          	Slider {
              	id: difSlider
                Layout.fillWidth: true
              	
              	minimumValue: 1
              	maximumValue: 6
              	value: 1
              	stepSize: 1
              
              	style: SliderStyle {
                		groove: Rectangle {
                          id: grooveRect
                          implicitHeight: 6
                          color: '#555555'
                          radius: implicitHeight
                          border {
                                color: '#888888'
                                width: 1
                          }

                          Rectangle {
                              implicitHeight: grooveRect.implicitHeight
                              implicitWidth: styleData.handlePosition
                              color: '#f9f9f9'
                              radius: grooveRect.radius
                              border {
                              		color: '#888888'
                                    width: 1
                              }
                         }		
                    }
                  	handle: Rectangle {
                        anchors.centerIn: parent
                    		color: control.pressed ? '#ffffff': '#d8d8d8'
                        border.color: '#666666'
                        border.width: 1
                        implicitWidth: 16
                        implicitHeight: 16
                        radius: 8
                    }
                }
            }
          	Label {
              	text: "Number of Measures:"
            }
          	TextField{
              	id: numMeasures
                text: '16'
              	validator: DoubleValidator { bottom: 1; top: 100; decimals: 0; notation: DoubleValidator.StandardNotation; }
              	implicitHeight: 20
            }
          
            Label {
                  text: "Instrument Voice:"
            }
            ComboBox {
                id: instrumentBox
                model: ListModel {
                    id: instrumentList
                    ListElement { text: "Clarinet"  }
                    ListElement { text: "Trumpet" }
                  	ListElement { text: "Alto-Saxophone" }
                    ListElement { text: "Flute" }
                    ListElement { text: "Violin" }
                    ListElement { text: "Oboe" }
                 }
                    currentIndex: 0
                    style: ComboBoxStyle {
                    font.family: 'MScore Text'
                    font.pointSize: 10
                }
            }
          	
            Button {
                id: confirmButton
                text: qsTranslate("PrefsDialogBase", "Create")
                onClicked: {
                  	createScore();
            		Qt.quit();
                }
            }
        }
    }
}